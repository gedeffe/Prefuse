package prefuse.data.query;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import javafx.scene.Node;
import prefuse.data.expression.ColumnExpression;
import prefuse.data.expression.Literal;
import prefuse.data.expression.RangePredicate;
import prefuse.data.tuple.TupleSet;
import prefuse.util.DataLib;
import prefuse.util.TypeLib;
import prefuse.util.ui.JRangeSlider;
import prefuse.util.ui.ValuedRangeModel;

/**
 * DynamicQueryBinding supporting queries based on a range of included
 * data values.
 * @author <a href="http://jheer.org">jeffrey heer</a>
 */
public class RangeQueryBinding extends DynamicQueryBinding {

    private final Class m_type;
    private final Listener m_lstnr;
    private ValuedRangeModel m_model;
    private final boolean m_ordinal;

    private static FocusListener s_sliderAdj;

    /**
     * Create a new RangeQueryBinding over the given set and data field.
     * @param ts the TupleSet to query
     * @param field the data field (Table column) to query
     */
    public RangeQueryBinding(final TupleSet ts, final String field) {
        this(ts, field, false);
    }

    /**
     * Create a new RangeQueryBinding over the given set and data field,
     * optionally forcing an ordinal treatment of data.
     * @param ts the TupleSet to query
     * @param field the data field (Table column) to query
     * @param forceOrdinal if true, forces all items in the range to be
     * treated in strictly ordinal fashion. That means that if the data
     * is numerical, the quantitative nature of the data will be ignored
     * and only the relative ordering of the numbers will matter. In terms
     * of mechanism, this entails that a {@link ObjectRangeModel} and not
     * a {@link NumberRangeModel} will be used to represent the data. If
     * the argument is false, default inference mechanisms will be used.
     */
    public RangeQueryBinding(final TupleSet ts, final String field, final boolean forceOrdinal) {
        super(ts, field);
        this.m_type = DataLib.inferType(ts, field);
        this.m_ordinal = forceOrdinal;
        this.m_lstnr = new Listener();
        this.initPredicate();
        this.initModel();
    }

    private void initPredicate() {
        // determine minimum and maximum values
        final Object min = DataLib.min(this.m_tuples, this.m_field).get(this.m_field);
        final Object max = DataLib.max(this.m_tuples, this.m_field).get(this.m_field);

        // set up predicate
        final Literal left = Literal.getLiteral(min, this.m_type);
        final Literal right = Literal.getLiteral(max, this.m_type);
        final ColumnExpression ce = new ColumnExpression(this.m_field);
        final RangePredicate rp = new RangePredicate(ce, left, right);
        this.setPredicate(rp);
    }

    public void initModel() {
        if ( this.m_model != null ) {
            this.m_model.removeChangeListener(this.m_lstnr);
        }

        // set up data / selection model
        ValuedRangeModel model = null;
        if ( TypeLib.isNumericType(this.m_type) && !this.m_ordinal ) {
            final Number min = (Number)DataLib.min(this.m_tuples, this.m_field).get(this.m_field);
            final Number max = (Number)DataLib.max(this.m_tuples, this.m_field).get(this.m_field);
            model = new NumberRangeModel(min, max, min, max);
        } else {
            model = new ObjectRangeModel(
                    DataLib.ordinalArray(this.m_tuples, this.m_field));
        }
        this.m_model = model;
        this.m_model.addChangeListener(this.m_lstnr);
    }

    /**
     * Return the ValuedRangeModel constructed by this dynamic query binding.
     * This model backs any user interface components generated by this
     * instance.
     * @return the ValuedRangeModel for this range query binding.
     */
    public ValuedRangeModel getModel() {
        return this.m_model;
    }

    /**
     * Attempts to return the ValuedRangeModel for this binding as a
     * NumberRangeModel. If the range model is not an instance of
     * {@link NumberRangeModel}, a null value is returned.
     * @return the ValuedRangeModel for this binding as a
     * {@link NumberRangeModel}, or null if the range is not numerical.
     */
    public NumberRangeModel getNumberModel() {
        return (this.m_model instanceof NumberRangeModel ?
                (NumberRangeModel)this.m_model : null);
    }

    /**
     * Attempts to return the ValuedRangeModel for this binding as an
     * ObjectRangeModel. If the range model is not an instance of
     * {@link ObjectRangeModel}, a null value is returned.
     * @return the ValuedRangeModel for this binding as an
     * {@link ObjectRangeModel}, or null if the range is numerical.
     */
    public ObjectRangeModel getObjectModel() {
        return (this.m_model instanceof ObjectRangeModel ?
                (ObjectRangeModel)this.m_model : null);
    }

    // ------------------------------------------------------------------------

    /**
     * Create a new horizontal range slider for interacting with the query.
     * @return a {@link prefuse.util.ui.JRangeSlider} bound to this dynamic
     * query.
     * @see prefuse.data.query.DynamicQueryBinding#createComponent()
     */
    @Override
    public Node createComponent() {
        return this.createHorizontalRangeSlider();
    }

    /**
     * Create a new horizontal range slider for interacting with the query.
     * @return a {@link prefuse.util.ui.JRangeSlider} bound to this dynamic
     * query.
     */
    public JRangeSlider createHorizontalRangeSlider() {
        return this.createRangeSlider(JRangeSlider.HORIZONTAL,
                JRangeSlider.LEFTRIGHT_TOPBOTTOM);
    }

    /**
     * Create a new vertical range slider for interacting with the query.
     * @return a {@link prefuse.util.ui.JRangeSlider} bound to this dynamic
     * query.
     */
    public JRangeSlider createVerticalRangeSlider() {
        return this.createRangeSlider(JRangeSlider.VERTICAL,
                JRangeSlider.RIGHTLEFT_BOTTOMTOP);
    }

    /**
     * Create a new range slider for interacting with the query, using the
     * given orientation and direction.
     * @param orientation the orientation (horizontal or vertical) of the
     * slider (see {@link prefuse.util.ui.JRangeSlider})
     * @param direction the direction (direction of data values) of the slider
     * (see {@link prefuse.util.ui.JRangeSlider})
     * @return a {@link prefuse.util.ui.JRangeSlider} bound to this dynamic
     * query.
     */
    public JRangeSlider createRangeSlider(final int orientation, final int direction) {
        return new JRangeSlider(this.m_model, orientation, direction);
    }

    /**
     * Create a new regular (non-range) slider for interacting with the query.
     * This allows you to select a single value at a time.
     * @return a {@link javax.swing.JSlider} bound to this dynamic query.
     */
    public JSlider createSlider() {
        final JSlider slider = new JSlider(this.m_model);
        slider.addFocusListener(RangeQueryBinding.getSliderAdjuster());
        return slider;
    }

    private synchronized static FocusListener getSliderAdjuster() {
        if ( RangeQueryBinding.s_sliderAdj == null ) {
            RangeQueryBinding.s_sliderAdj = new SliderAdjuster();
        }
        return RangeQueryBinding.s_sliderAdj;
    }

    // ------------------------------------------------------------------------

    private static class SliderAdjuster implements FocusListener {
        @Override
        public void focusGained(final FocusEvent e) {
            ((JSlider)e.getSource()).setExtent(0);
        }
        @Override
        public void focusLost(final FocusEvent e) {
            // do nothing
        }
    } // end of inner class SliderAdjuster

    private class Listener implements ChangeListener {
        @Override
        public void stateChanged(final ChangeEvent e) {
            final ValuedRangeModel model = (ValuedRangeModel)e.getSource();
            final Object lo = model.getLowValue();
            final Object hi = model.getHighValue();

            final RangePredicate rp = (RangePredicate)RangeQueryBinding.this.m_query;
            rp.setLeftExpression(Literal.getLiteral(lo, RangeQueryBinding.this.m_type));
            rp.setRightExpression(Literal.getLiteral(hi, RangeQueryBinding.this.m_type));
        }
    } // end of inner class Listener

} // end of class RangeQueryBinding
